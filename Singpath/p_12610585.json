{"problems": [{"tests": "assertEquals(\"l\",character(\"hello\",2));\nassertEquals(\"p\",character(\"jump\",3));\nassertEquals(\"4\",character(\"123456789\",3));\nassertEquals(\"y\",character(\"yip\",0));\nassertEquals(\"\",character(\"hey\",-1));\nassertEquals(\"\",character(\"star\",5));", "description": "Create a function that takes a string and a number as a parameter.  It should return the character that is in the position given, or an empty string if the position is invalid (e.g. -1)", "lines": ["String character(String s, int n) {    ", "    if (n < 0 || n >= s.length()) {", "        return \"\";", "    }", "    return s.substring(n,n+1);", "}"], "solution": "String character(String s, int n) {    \n    if (n < 0 || n >= s.length()) {\n        return \"\";\n    }\n    return s.substring(n,n+1);\n}", "path_id": 8113761, "depth": 6, "problemset_id": 12610585, "examples": "The method substring(start,end) allows you to extract a section of the string from the larger String.  \nString s = '01234567';\ns.substring(4,7) -> '456';", "is_mobile_problem": true, "problemsetorder": 10, "id": 12606581, "nonErrorResults": {"126354": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "135246": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "123654": {"solved": true, "results": [{"call": "assertEquals(\"l\",character(\"hello\",2));", "correct": true}, {"call": "assertEquals(\"p\",character(\"jump\",3));", "correct": true}, {"call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": true}, {"call": "assertEquals(\"y\",character(\"yip\",0));", "correct": true}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "132456": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "132546": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "132654": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "135264": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "1356": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "132564": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "12436": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "1354": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "12634": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "136": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "134": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "123456": {"solved": true, "results": [{"call": "assertEquals(\"l\",character(\"hello\",2));", "correct": true}, {"call": "assertEquals(\"p\",character(\"jump\",3));", "correct": true}, {"call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": true}, {"call": "assertEquals(\"y\",character(\"yip\",0));", "correct": true}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "13246": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "13264": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}, "124356": {"solved": false, "results": [{"expected": "[l]", "received": "[]", "call": "assertEquals(\"l\",character(\"hello\",2));", "correct": false}, {"expected": "[p]", "received": "[]", "call": "assertEquals(\"p\",character(\"jump\",3));", "correct": false}, {"expected": "[4]", "received": "[]", "call": "assertEquals(\"4\",character(\"123456789\",3));", "correct": false}, {"expected": "[y]", "received": "[]", "call": "assertEquals(\"y\",character(\"yip\",0));", "correct": false}, {"call": "assertEquals(\"\",character(\"hey\",-1));", "correct": true}, {"call": "assertEquals(\"\",character(\"star\",5));", "correct": true}], "printed": ""}}, "name": "Strings"}, {"tests": "assertEquals(\"Hello Fred!\",hello(\"Fred\"));\nassertEquals(\"Hello x!\",hello(\"x\"));\nassertEquals(\"Hello Sally!\",hello(\"Sally\"));\nassertEquals(\"Hello !\",hello(\"\"));", "description": "Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".", "lines": ["String hello(String name) {", "    return \"Hello \" + name + \"!\";", "}"], "solution": "String hello(String name) {\n    return \"Hello \" + name + \"!\";\n}", "path_id": 8113761, "depth": 3, "problemset_id": 12610585, "examples": "Example: hello(\"Fred\") returns \"Hello Fred!\"", "is_mobile_problem": true, "problemsetorder": 20, "id": 12610586, "nonErrorResults": {"123": {"solved": true, "results": [{"call": "assertEquals(\"Hello Fred!\",hello(\"Fred\"));", "correct": true}, {"call": "assertEquals(\"Hello x!\",hello(\"x\"));", "correct": true}, {"call": "assertEquals(\"Hello Sally!\",hello(\"Sally\"));", "correct": true}, {"call": "assertEquals(\"Hello !\",hello(\"\"));", "correct": true}], "printed": ""}}, "name": "Hello"}, {"tests": "assertEquals(\"ell\",middle(\"hello\"));\nassertEquals(\"ississipp\",middle(\"Mississippi\"));\nassertEquals(\"o\",middle(\"bob\"));\nassertEquals(\"\",middle(\"hi\"));\nassertEquals(\"\",middle(\"a\"));", "description": "The substring() method can extract any substring from a given string. Create a function that takes a string as input and returns the middle of the string.  ", "lines": ["String middle(String s) {", "    if (s.length() < 3) return \"\";", "    return s.substring(1,s.length()-1);", "}"], "solution": "String middle(String s) {\n    if (s.length() < 3) return \"\";\n    return s.substring(1,s.length()-1);\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12610585, "examples": "s=\"hello\"\ns.substring(1,3) -> \"el\"", "is_mobile_problem": true, "problemsetorder": 30, "id": 12600588, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertEquals(\"ell\",middle(\"hello\"));", "correct": true}, {"call": "assertEquals(\"ississipp\",middle(\"Mississippi\"));", "correct": true}, {"call": "assertEquals(\"o\",middle(\"bob\"));", "correct": true}, {"call": "assertEquals(\"\",middle(\"hi\"));", "correct": true}, {"call": "assertEquals(\"\",middle(\"a\"));", "correct": true}], "printed": ""}}, "name": "String Slice"}, {"tests": "assertEquals(0,search(\"blob\",'b'));\nassertEquals(2,search(\"hello\",'l'));\nassertEquals(-1,search(\"pi\",'e'));", "description": "Create a function that searches a string for a given character and returns the position that the letter first occurs.  If the letter doesn't occur, return -1.\n\nNote that in Java, char uses single quote ', but Strings use double quote \"", "lines": ["int search(String word, char letter) {", "    return word.indexOf(letter);", "}"], "solution": "int search(String word, char letter) {\n    return word.indexOf(letter);\n}", "path_id": 8113761, "depth": 3, "problemset_id": 12610585, "examples": ">>> search(\"blob\",'b')\n0\n>>> search(\"hello\",'l')\n2\n>>> search(\"pi\",'e')\n-1", "is_mobile_problem": true, "problemsetorder": 40, "id": 12600589, "nonErrorResults": {"123": {"solved": true, "results": [{"call": "assertEquals(0,search(\"blob\",'b'));", "correct": true}, {"call": "assertEquals(2,search(\"hello\",'l'));", "correct": true}, {"call": "assertEquals(-1,search(\"pi\",'e'));", "correct": true}], "printed": ""}}, "name": "String Search"}, {"tests": "assertEquals(1,search(\"blob\",\"lo\"));\nassertEquals(7,search(\"hello, dolly\",\"dol\"));\nassertEquals(-1,search(\"cake\",\"cok\"));\nassertEquals(-1,search(\"pillow\",\"pillows\"));\nassertEquals(2,search(\"478294\",\"8294\"));", "description": "Make a more versatile function search(word, st) that searches the string [st] for another smaller string [word].", "lines": ["int search(String word, String st) {", "    return word.indexOf(st);", "}"], "solution": "int search(String word, String st) {\n    return word.indexOf(st);\n}", "path_id": 8113761, "depth": 3, "problemset_id": 12610585, "examples": "Example: search(\"blob\",\"lo\") returns 1.\nExample: search(\"hello, dolly\",\"dol\") returns 7.", "is_mobile_problem": true, "problemsetorder": 50, "id": 12609591, "nonErrorResults": {"123": {"solved": true, "results": [{"call": "assertEquals(1,search(\"blob\",\"lo\"));", "correct": true}, {"call": "assertEquals(7,search(\"hello, dolly\",\"dol\"));", "correct": true}, {"call": "assertEquals(-1,search(\"cake\",\"cok\"));", "correct": true}, {"call": "assertEquals(-1,search(\"pillow\",\"pillows\"));", "correct": true}, {"call": "assertEquals(2,search(\"478294\",\"8294\"));", "correct": true}], "printed": ""}}, "name": "Search Upgrade"}, {"tests": "assertEquals(\"HI\",upper_case(\"hi\"));\nassertEquals(\"FRIEND\",upper_case(\"friEnd\"));\n", "description": "Create a function upper_case that takes a string and returns it in all caps.", "lines": ["String upper_case(String st) {", "    return st.toUpperCase();", "}"], "solution": "String upper_case(String st) {\n    return st.toUpperCase();\n}\n", "path_id": 8113761, "depth": 3, "problemset_id": 12610585, "examples": "Example: upper_case(\"hi\") returns \"HI\".\n", "is_mobile_problem": true, "problemsetorder": 60, "id": 12598585, "nonErrorResults": {"123": {"solved": true, "results": [{"call": "assertEquals(\"HI\",upper_case(\"hi\"));", "correct": true}, {"call": "assertEquals(\"FRIEND\",upper_case(\"friEnd\"));", "correct": true}], "printed": ""}}, "name": "Upper Case"}, {"tests": "assertEquals(\"<i>Wow!</i>\",makeTag(\"i\",\"Wow!\"));\nassertEquals(\"<cite>ICS</cite>\",makeTag(\"cite\",\"ICS\"));\nassertEquals(\"<i>Yay</i>\",makeTag(\"i\", \"Yay\"));\nassertEquals(\"<i>Hello</i>\",makeTag(\"i\", \"Hello\"));\nassertEquals(\"<cite>Yay</cite>\",makeTag(\"cite\", \"Yay\"));\nassertEquals(\"<address>here</address>\",makeTag(\"address\", \"here\"));", "description": "The web is full of html and tags.  For example, the i tag creates italics text&#58; <i>Wow!</i>.  Create a function makeTag(tag, word) that takes a tag and some text and returns the proper coding. ", "lines": ["String makeTag(String tag, String word) {       ", "    return \"<\"+tag+\">\"+word+\"</\"+tag+\">\";", "}"], "solution": "String makeTag(String tag, String word) {       \n    return \"<\"+tag+\">\"+word+\"</\"+tag+\">\";\n}", "path_id": 8113761, "depth": 3, "problemset_id": 12610585, "examples": "Example: makeTag(\"i\",\"Wow!\") returns \"<i>Wow!</i>\"", "is_mobile_problem": true, "problemsetorder": 100, "id": 12607587, "nonErrorResults": {"123": {"solved": true, "results": [{"call": "assertEquals(\"<i>Wow!</i>\",makeTag(\"i\",\"Wow!\"));", "correct": true}, {"call": "assertEquals(\"<cite>ICS</cite>\",makeTag(\"cite\",\"ICS\"));", "correct": true}, {"call": "assertEquals(\"<i>Yay</i>\",makeTag(\"i\", \"Yay\"));", "correct": true}, {"call": "assertEquals(\"<i>Hello</i>\",makeTag(\"i\", \"Hello\"));", "correct": true}, {"call": "assertEquals(\"<cite>Yay</cite>\",makeTag(\"cite\", \"Yay\"));", "correct": true}, {"call": "assertEquals(\"<address>here</address>\",makeTag(\"address\", \"here\"));", "correct": true}], "printed": ""}}, "name": "Make Tags"}, {"tests": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));\nassertEquals(true, endOther(\"AbC\", \"HiaBc\"));\nassertEquals(true, endOther(\"abc\", \"abXabc\"));\nassertEquals(false, endOther(\"Hiabcx\", \"bc\"));\nassertEquals(true, endOther(\"abc\", \"abc\"));\nassertEquals(true, endOther(\"xyz\", \"12xyz\"));\nassertEquals(false, endOther(\"yz\", \"12xz\"));\nassertEquals(false, endOther(\"ab\", \"ab12\"));", "description": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\").", "lines": ["boolean endOther(String a, String b) {", "    a = a.toLowerCase();", "    b = b.toLowerCase();", "    return a.endsWith(b) || b.endsWith(a);", "}"], "solution": "boolean endOther(String a, String b) {\n    a = a.toLowerCase();\n    b = b.toLowerCase();\n    return a.endsWith(b) || b.endsWith(a);\n}", "path_id": 8113761, "depth": 5, "problemset_id": 12610585, "examples": "Exmaple: endOther(\"Hiabc\", \"abc\") returns true\nExample: endOther(\"AbC\", \"HiaBc\") returns true", "is_mobile_problem": true, "problemsetorder": 110, "id": 12606583, "nonErrorResults": {"14235": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "145": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "1425": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "1345": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "14325": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "12435": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "1435": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "1245": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "13245": {"solved": true, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "13425": {"solved": false, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": false}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}, "12345": {"solved": true, "results": [{"call": "assertEquals(true, endOther(\"Hiabc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"AbC\", \"HiaBc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abXabc\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"Hiabcx\", \"bc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"abc\", \"abc\"));", "correct": true}, {"call": "assertEquals(true, endOther(\"xyz\", \"12xyz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"yz\", \"12xz\"));", "correct": true}, {"call": "assertEquals(false, endOther(\"ab\", \"ab12\"));", "correct": true}], "printed": ""}}, "name": "Ends With"}, {"tests": "assertEquals(true,xyzThere(\"abcxyz\"));\nassertEquals(false,xyzThere(\"abc.xyz\"));\nassertEquals(true,xyzThere(\"xyz.abc\"));\nassertEquals(false,xyzThere(\"abcxy\"));\nassertEquals(true,xyzThere(\"1.xyz.xyz2xyz\"));", "description": "Write a function that returns True if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.).", "lines": ["boolean xyzThere(String st) {", "    st = st.replace(\".x\", \" \");", "    return st.contains(\"xyz\");", "}"], "solution": "boolean xyzThere(String st) {\n    st = st.replace(\".x\", \" \");\n    return st.contains(\"xyz\");\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12610585, "examples": "So \"xxyz\" returns 'True' but \"x.xyz\" does not.", "is_mobile_problem": true, "problemsetorder": 130, "id": 12599589, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertEquals(true,xyzThere(\"abcxyz\"));", "correct": true}, {"call": "assertEquals(false,xyzThere(\"abc.xyz\"));", "correct": true}, {"call": "assertEquals(true,xyzThere(\"xyz.abc\"));", "correct": true}, {"call": "assertEquals(false,xyzThere(\"abcxy\"));", "correct": true}, {"call": "assertEquals(true,xyzThere(\"1.xyz.xyz2xyz\"));", "correct": true}], "printed": ""}, "1324": {"solved": false, "results": [{"call": "assertEquals(true,xyzThere(\"abcxyz\"));", "correct": true}, {"expected": "false", "received": "true", "call": "assertEquals(false,xyzThere(\"abc.xyz\"));", "correct": false}, {"call": "assertEquals(true,xyzThere(\"xyz.abc\"));", "correct": true}, {"call": "assertEquals(false,xyzThere(\"abcxy\"));", "correct": true}, {"call": "assertEquals(true,xyzThere(\"1.xyz.xyz2xyz\"));", "correct": true}], "printed": ""}, "134": {"solved": false, "results": [{"call": "assertEquals(true,xyzThere(\"abcxyz\"));", "correct": true}, {"expected": "false", "received": "true", "call": "assertEquals(false,xyzThere(\"abc.xyz\"));", "correct": false}, {"call": "assertEquals(true,xyzThere(\"xyz.abc\"));", "correct": true}, {"call": "assertEquals(false,xyzThere(\"abcxy\"));", "correct": true}, {"call": "assertEquals(true,xyzThere(\"1.xyz.xyz2xyz\"));", "correct": true}], "printed": ""}}, "name": "Find xyz"}, {"tests": "assertEquals(\"hellolololo\",echo(\"hello\"));\nassertEquals(\"bananananana\",echo(\"banana\"));\nassertEquals(\"HELPLPLPLP\",echo(\"HELP\"));\nassertEquals(\"panderererer\",echo(\"pander\"));\nassertEquals(\"yeseseses\",echo(\"yes\"));\nassertEquals(\"somethingngngng\",echo(\"something\"));", "description": "Given a string of length greater than 2, return a string with the last two characters repeated four times.", "lines": ["public String echo(String s) {", "    String lastTwo = s.substring(s.length()-2);", "    return s + lastTwo + lastTwo + lastTwo;", "}"], "solution": "public String echo(String s) {\n    String lastTwo = s.substring(s.length()-2);\n    return s + lastTwo + lastTwo + lastTwo;\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12610585, "examples": "Example: echo(\"hello\")\n\"hellolololo\"\nExample: echo(\"banana\")\n\"bananananana\"", "is_mobile_problem": true, "problemsetorder": 150, "id": 12609592, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertEquals(\"hellolololo\",echo(\"hello\"));", "correct": true}, {"call": "assertEquals(\"bananananana\",echo(\"banana\"));", "correct": true}, {"call": "assertEquals(\"HELPLPLPLP\",echo(\"HELP\"));", "correct": true}, {"call": "assertEquals(\"panderererer\",echo(\"pander\"));", "correct": true}, {"call": "assertEquals(\"yeseseses\",echo(\"yes\"));", "correct": true}, {"call": "assertEquals(\"somethingngngng\",echo(\"something\"));", "correct": true}], "printed": ""}, "1324": {"solved": false, "results": [{"expected": "hello[lololo]", "received": "hello[voidvoidvoid]", "call": "assertEquals(\"hellolololo\",echo(\"hello\"));", "correct": false}, {"expected": "banana[nanana]", "received": "banana[voidvoidvoid]", "call": "assertEquals(\"bananananana\",echo(\"banana\"));", "correct": false}, {"expected": "HELP[LPLPLP]", "received": "HELP[voidvoidvoid]", "call": "assertEquals(\"HELPLPLPLP\",echo(\"HELP\"));", "correct": false}, {"expected": "pander[ererer]", "received": "pander[voidvoidvoid]", "call": "assertEquals(\"panderererer\",echo(\"pander\"));", "correct": false}, {"expected": "yes[eseses]", "received": "yes[voidvoidvoid]", "call": "assertEquals(\"yeseseses\",echo(\"yes\"));", "correct": false}, {"expected": "something[ngngng]", "received": "something[voidvoidvoid]", "call": "assertEquals(\"somethingngngng\",echo(\"something\"));", "correct": false}], "printed": ""}, "134": {"solved": false, "results": [{"expected": "hello[lololo]", "received": "hello[voidvoidvoid]", "call": "assertEquals(\"hellolololo\",echo(\"hello\"));", "correct": false}, {"expected": "banana[nanana]", "received": "banana[voidvoidvoid]", "call": "assertEquals(\"bananananana\",echo(\"banana\"));", "correct": false}, {"expected": "HELP[LPLPLP]", "received": "HELP[voidvoidvoid]", "call": "assertEquals(\"HELPLPLPLP\",echo(\"HELP\"));", "correct": false}, {"expected": "pander[ererer]", "received": "pander[voidvoidvoid]", "call": "assertEquals(\"panderererer\",echo(\"pander\"));", "correct": false}, {"expected": "yes[eseses]", "received": "yes[voidvoidvoid]", "call": "assertEquals(\"yeseseses\",echo(\"yes\"));", "correct": false}, {"expected": "something[ngngng]", "received": "something[voidvoidvoid]", "call": "assertEquals(\"somethingngngng\",echo(\"something\"));", "correct": false}], "printed": ""}}, "name": "Echo"}, {"tests": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));\r\nassertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));\r\nassertEquals(\"baaab\",comboString(\"aaa\",\"b\"));\r\nassertEquals(\"baaab\",comboString(\"b\",\"aaa\"));\r\nassertEquals(\"aaa\",comboString(\"aaa\",\"\"));\r\nassertEquals(\"bb\",comboString(\"\",\"bb\"));", "description": "Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). ", "lines": ["public String comboString(String s1, String s2) {", "        if (s1.length() > s2.length()){", "            return s2+s1+s2;", "        } else{", "            return s1+s2+s1;", "        }", "    }"], "solution": "public String comboString(String s1, String s2) {\n        if (s1.length() > s2.length()){\n            return s2+s1+s2;\n        } else{\n            return s1+s2+s1;\n        }\n    }", "path_id": 8113761, "depth": 7, "problemset_id": 12610585, "examples": "Example: comboString(\"Hello\", \"hi\")\n\"hiHellohi\"\nExample: comboString(\"hi\", \"Hello\")\n\"hiHellohi\"", "is_mobile_problem": true, "problemsetorder": 170, "id": 12601586, "nonErrorResults": {"135276": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1524367": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1324756": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "157": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "156": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1247356": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1536": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132567": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "152637": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "15267": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1246357": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "137": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "136": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "12637": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1524637": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "126357": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1352467": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "12736": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1324657": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1523476": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1234567": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "12756": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1243657": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "12657": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "13267": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1243756": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1325476": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "152736": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1245637": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "124657": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1532476": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "13276": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "124736": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "152367": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1234756": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1254367": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "135267": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "152467": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "123657": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132467": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "127536": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132576": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1357": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1356": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "124637": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "123756": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1247536": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132756": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1245736": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1246537": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "15276": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132476": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "124756": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1352476": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "153276": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1254637": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1524376": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1234657": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1523467": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1234576": {"solved": true, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1524736": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "132657": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1324567": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1537": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "152476": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1325467": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "125736": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "126537": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "127356": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1532467": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "152376": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1324576": {"solved": false, "results": [{"call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": true}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": true}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "125637": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "1254376": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}, "153267": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": true}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": true}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": true}], "printed": ""}, "1254736": {"solved": false, "results": [{"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"Hello\",\"hi\"));", "correct": false}, {"expected": "[hiHellohi]", "received": "[HellohiHello]", "call": "assertEquals(\"hiHellohi\",comboString(\"hi\",\"Hello\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"aaa\",\"b\"));", "correct": false}, {"expected": "[baaab]", "received": "[aaabaaa]", "call": "assertEquals(\"baaab\",comboString(\"b\",\"aaa\"));", "correct": false}, {"expected": "aaa[]", "received": "aaa[aaa]", "call": "assertEquals(\"aaa\",comboString(\"aaa\",\"\"));", "correct": false}, {"expected": "bb[]", "received": "bb[bb]", "call": "assertEquals(\"bb\",comboString(\"\",\"bb\"));", "correct": false}], "printed": ""}}, "name": "Sandwich"}, {"tests": "assertArrayEquals(new String[] {\"Listen\", \"strange\", \"people\"}, parse(\"Listen, strange people!\"));\nassertArrayEquals(new String[] {\"To\", \"seek\", \"the\", \"Holy\", \"Grail\"}, parse(\"To seek the Holy Grail.\"));\nassertArrayEquals(new String[] {\"This\", \"is\", \"taking\", \"too\", \"long\",\"a\",\"time\",\"saving\",\"measure\",\"would\",\"be\",\"good\"}, parse(\"This is taking too long; a time-saving measure would be good.\"));\n", "description": "Create a function that takes a string as input and returns a list of all words (in String array) in the string. It should remove all punctuation, replacing dashes with spaces.\n", "lines": ["String[] parse(String str) {", "    String cleaned = str.replaceAll(\"-\", \" \").replaceAll(\"[^A-Za-z ]\",\"\");", "    return cleaned.split(\" \");", "}"], "solution": "String[] parse(String str) {\n    String cleaned = str.replaceAll(\"-\", \" \").replaceAll(\"[^A-Za-z ]\",\"\");\n    return cleaned.split(\" \");\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12610585, "examples": "Punctuation includes the apostrophe ('), exclamation and question mark symbols (!?) as well as the semicolon, full stop and comma (;.,).", "is_mobile_problem": true, "problemsetorder": 200, "id": 12604580, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertArrayEquals(new String[] {\"Listen\", \"strange\", \"people\"}, parse(\"Listen, strange people!\"));", "correct": true}, {"call": "assertArrayEquals(new String[] {\"To\", \"seek\", \"the\", \"Holy\", \"Grail\"}, parse(\"To seek the Holy Grail.\"));", "correct": true}, {"call": "assertArrayEquals(new String[] {\"This\", \"is\", \"taking\", \"too\", \"long\",\"a\",\"time\",\"saving\",\"measure\",\"would\",\"be\",\"good\"}, parse(\"This is taking too long; a time-saving measure would be good.\"));", "correct": true}], "printed": ""}}, "name": "Parse a string"}], "type": "problems", "problemset": {"pathorder": 6, "editor": {"player_id": 12376680, "nickname": "Joshua Ng", "email": "PRIVATE"}, "id": 12610585, "name": "Java Level 6", "description": "Strings"}}