{"problems": [{"tests": "assertEquals(1, compare(4,2));\r\nassertEquals(-1, compare(4,21));\r\nassertEquals(0, compare(4,4));", "description": "Create a function that compares two values, x and y.  It should return 1 if x is greater, 0 if they are equal, and -1 if y is greater.", "lines": ["int compare(int x,int y)", "{", "    if (x==y) return 0;", "    if (x<y) return -1;", "    if (x>y) return 1;", "}"], "solution": "int compare(int x,int y)\n{\n    if (x==y) return 0;\n    if (x<y) return -1;\n    if (x>y) return 1;\n}", "path_id": 8113761, "depth": 6, "problemset_id": 12600585, "examples": "Here's a hint:\nif x is greater than y, the function returns 1\nif x is lesser than y, the function returns -1\nif x is equal to y, the function returns 0", "is_mobile_problem": true, "problemsetorder": 1, "id": 12599586, "nonErrorResults": {"123546": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}, "125436": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}, "125346": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}, "124356": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}, "124536": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}, "123456": {"solved": true, "results": [{"call": "assertEquals(1, compare(4,2));", "correct": true}, {"call": "assertEquals(-1, compare(4,21));", "correct": true}, {"call": "assertEquals(0, compare(4,4));", "correct": true}], "printed": ""}}, "name": "Compare"}, {"tests": "assertEquals(false, is_divisible(5,4));\r\nassertEquals(false, is_divisible(2,8));\r\nassertEquals(true, is_divisible(8,2));", "description": "Create a function that takes two integers as inputs and tests if the first number is divisible by the second integer with no remainder. The function should return true or false.", "lines": ["boolean is_divisible(int a,int b){ ", "    return a%b==0;", "    return a/b;", "}"], "solution": "boolean is_divisible(int a,int b){ \n    return a%b==0;\n    return a/b;\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12600585, "examples": "Example 1: is_divisible(5,4)\nfalse\nExample 2: is_divisible(2,8)\nfalse\nExample 3:  is_divisible(8,2) (8/2 =4 with no reminder!)\ntrue", "is_mobile_problem": true, "problemsetorder": 2, "id": 12607586, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertEquals(false, is_divisible(5,4));", "correct": true}, {"call": "assertEquals(false, is_divisible(2,8));", "correct": true}, {"call": "assertEquals(true, is_divisible(8,2));", "correct": true}], "printed": ""}, "124": {"solved": true, "results": [{"call": "assertEquals(false, is_divisible(5,4));", "correct": true}, {"call": "assertEquals(false, is_divisible(2,8));", "correct": true}, {"call": "assertEquals(true, is_divisible(8,2));", "correct": true}], "printed": ""}}, "name": "Is Divisible"}, {"tests": "assertEquals(true, is_between(3,6,8));\r\nassertEquals(false, is_between(31,6,8));\r\nassertEquals(true, is_between(6,6,6));\r\nassertEquals(true, is_between(3,6,6));\r\nassertEquals(true, is_between(6,6,61));\r\n", "description": "Create a function that compares three integers and returns a true or false that the values are in ascending order.", "lines": ["boolean is_between(int x,int y,int z)", "{", "    if (x<=y && y<=z) {return true;}", "    if (x<=y && y>=z) {return true;}", "    return false;", "}"], "solution": "boolean is_between(int x,int y,int z)\n{\n    if (x<=y && y<=z) {return true;}\n    if (x<=y && y>=z) {return true;}\n    return false;\n}", "path_id": 8113761, "depth": 6, "problemset_id": 12600585, "examples": "Use comparison symbols to check if a number is between a range.", "is_mobile_problem": true, "problemsetorder": 3, "id": 12605582, "nonErrorResults": {"12536": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "123546": {"solved": true, "results": [{"call": "assertEquals(true, is_between(3,6,8));", "correct": true}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,61));", "correct": true}], "printed": ""}, "12456": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "125346": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "1256": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "12546": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "125436": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,6));", "correct": false}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "124356": {"solved": true, "results": [{"call": "assertEquals(true, is_between(3,6,8));", "correct": true}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,61));", "correct": true}], "printed": ""}, "124536": {"solved": false, "results": [{"expected": "true", "received": "false", "call": "assertEquals(true, is_between(3,6,8));", "correct": false}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"expected": "true", "received": "false", "call": "assertEquals(true, is_between(6,6,61));", "correct": false}], "printed": ""}, "123456": {"solved": true, "results": [{"call": "assertEquals(true, is_between(3,6,8));", "correct": true}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,61));", "correct": true}], "printed": ""}, "12356": {"solved": true, "results": [{"call": "assertEquals(true, is_between(3,6,8));", "correct": true}, {"call": "assertEquals(false, is_between(31,6,8));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(3,6,6));", "correct": true}, {"call": "assertEquals(true, is_between(6,6,61));", "correct": true}], "printed": ""}}, "name": "Is Between"}, {"tests": "assertEquals(\"A\", checkGrade(90));\nassertEquals(\"C\", checkGrade(10));\nassertEquals(\"B\", checkGrade(75));", "description": "Write a if-else statement to return your grade based on your score range.", "lines": ["public String checkGrade(int score){", "    if (score > 80) {", "        return \"A\";", "    } else if ((score>71)&&(score<=80)) {", "    return \"B\";", "    } else return \"C\"; ", "}"], "solution": "public String checkGrade(int score){\n    if (score > 80) {\n        return \"A\";\n    } else if ((score>71)&&(score<=80)) {\n    return \"B\";\n    } else return \"C\"; \n}", "path_id": 8113761, "depth": 7, "problemset_id": 12600585, "examples": "score > 80: A\nscore >= 71 && score <=80: B\nscore <= 70: C", "is_mobile_problem": true, "problemsetorder": 9, "id": 13307639, "nonErrorResults": {"1526734": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "126573": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "137": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1246375": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1375426": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1375": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "124657": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1324567": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1326754": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "137524": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1246537": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "137526": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1263754": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1254637": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "125367": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "132657": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "157346": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1245637": {"solved": true, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "125673": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1246357": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "15732": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1524637": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "153267": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1573264": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "132467": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "13756": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "13752": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "12657": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "157342": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "152367": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "152673": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "152637": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1375264": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "15734": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "15736": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "132675": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1573462": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "137542": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "123675": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1523467": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1537": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "157362": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "157364": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1524367": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1573246": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "132567": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "12637": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1352467": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1324657": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1234567": {"solved": true, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "137546": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "12567": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1375462": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1236754": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "137564": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "12367": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "135267": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "123657": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "137562": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1375246": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1357": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "124637": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "123567": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1234657": {"solved": true, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1573642": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1375642": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1246573": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "126537": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "125637": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1265734": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "157": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1324675": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "126357": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "15267": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1243657": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1524673": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "13267": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1325467": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1254367": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "13754": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "126375": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "152467": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "157324": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "157326": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1256734": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"call": "assertEquals(\"C\", checkGrade(10));", "correct": true}, {"expected": "[B]", "received": "[C]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1573426": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1573624": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1375624": {"solved": false, "results": [{"call": "assertEquals(\"A\", checkGrade(90));", "correct": true}, {"expected": "[C]", "received": "[A]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"expected": "[B]", "received": "[A]", "call": "assertEquals(\"B\", checkGrade(75));", "correct": false}], "printed": ""}, "1573": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}, "1532467": {"solved": false, "results": [{"expected": "[A]", "received": "[B]", "call": "assertEquals(\"A\", checkGrade(90));", "correct": false}, {"expected": "[C]", "received": "[B]", "call": "assertEquals(\"C\", checkGrade(10));", "correct": false}, {"call": "assertEquals(\"B\", checkGrade(75));", "correct": true}], "printed": ""}}, "name": "What's your Grade?"}, {"tests": "assertEquals(6, factorial(3));\r\nassertEquals(120, factorial(5));\r\nassertEquals(5040, factorial(7));", "description": "Create a recursive function to calculate the factorial of a number.", "lines": ["int factorial(int x)", "{", "    if(x == 1)", "    return 1;", "    else", "    return x * factorial(x - 1);", "}"], "solution": "int factorial(int x)\n{\n    if(x == 1)\n    return 1;\n    else\n    return x * factorial(x - 1);\n}", "path_id": 8113761, "depth": 7, "problemset_id": 12600585, "examples": "Recursive functions can be very powerful.  We use them when a problem can be solved by breaking it into an easier version of the same problem. Factorials are a great example. \nThe factorial of a n is simply the number multiplied by the factorial of (n-1).", "is_mobile_problem": true, "problemsetorder": 10, "id": 12600586, "nonErrorResults": {"12473": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "123647": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "1234567": {"solved": true, "results": [{"call": "assertEquals(6, factorial(3));", "correct": true}, {"call": "assertEquals(120, factorial(5));", "correct": true}, {"call": "assertEquals(5040, factorial(7));", "correct": true}], "printed": ""}, "12467": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "124367": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "123467": {"solved": true, "results": [{"call": "assertEquals(6, factorial(3));", "correct": true}, {"call": "assertEquals(120, factorial(5));", "correct": true}, {"call": "assertEquals(5040, factorial(7));", "correct": true}], "printed": ""}, "1236547": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "1247": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "1247365": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "361247": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "124673": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}, "124736": {"solved": false, "results": [{"expected": "6", "received": "1", "call": "assertEquals(6, factorial(3));", "correct": false}, {"expected": "120", "received": "1", "call": "assertEquals(120, factorial(5));", "correct": false}, {"expected": "5040", "received": "1", "call": "assertEquals(5040, factorial(7));", "correct": false}], "printed": ""}}, "name": "Factorial"}, {"tests": "assertEquals(\"Prime\", checkPrime(5));\nassertEquals(\"Not Prime\", checkPrime(10));\n", "description": "Write a function to check if a number is a prime number?", "lines": ["public String checkPrime (int num) {", "    int count = 0;", "    for (int i=1; i<=num; i++) {", "        if (num%i==0) { count++;}", "    } if (count == 2) return \"Prime\";", "    else return \"Not Prime\";", "}"], "solution": "public String checkPrime (int num) {\n    int count = 0;\n    for (int i=1; i<=num; i++) {\n        if (num%i==0) { count++;}\n    } if (count == 2) return \"Prime\";\n    else return \"Not Prime\";\n}", "path_id": 8113761, "depth": 7, "problemset_id": 12600585, "examples": "A prime number can only be divided by itself and 1.", "is_mobile_problem": true, "problemsetorder": 60, "id": 13329641, "nonErrorResults": {"2134675": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1324675": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "135627": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "132567": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1356427": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "2134567": {"solved": true, "results": [{"call": "assertEquals(\"Prime\", checkPrime(5));", "correct": true}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "2134657": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1324657": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1345672": {"solved": true, "results": [{"call": "assertEquals(\"Prime\", checkPrime(5));", "correct": true}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1234567": {"solved": true, "results": [{"call": "assertEquals(\"Prime\", checkPrime(5));", "correct": true}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "13567": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "2135647": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "135672": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1346752": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1324567": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1346572": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "123567": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1356472": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1356247": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1234657": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1325647": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1235647": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "213567": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "1234675": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}, "135647": {"solved": false, "results": [{"expected": "[]Prime", "received": "[Not ]Prime", "call": "assertEquals(\"Prime\", checkPrime(5));", "correct": false}, {"call": "assertEquals(\"Not Prime\", checkPrime(10));", "correct": true}], "printed": ""}}, "name": "Is the number Prime?"}, {"tests": "assertEquals(1, fibonacci(1));\r\nassertEquals(3, fibonacci(4));\r\nassertEquals(21, fibonacci(8));\r\nassertEquals(6765, fibonacci(20));", "description": "Create a function that uses recursion to calculate a given term of the Fibonacci series. The first few terms are&#58;\n1,1,2,3,5,8,13,21,34. . .", "lines": ["int fibonacci(int x)", "{", "    if( x == 1 || x == 2)", "        return 1;", "    else", "        return fibonacci(x-1)+fibonacci(x-2);", "}"], "solution": "int fibonacci(int x)\n{\n    if( x == 1 || x == 2)\n        return 1;\n    else\n        return fibonacci(x-1)+fibonacci(x-2);\n}", "path_id": 8113761, "depth": 7, "problemset_id": 12600585, "examples": "Another great recursive function is the Fibonacci Series.  A Fibonacci number is found by adding the two terms directly before it.  \n", "is_mobile_problem": true, "problemsetorder": 11, "id": 12598583, "nonErrorResults": {"12473": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "123647": {"solved": false, "results": [{"expected": "1", "received": "2", "call": "assertEquals(1, fibonacci(1));", "correct": false}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "1234567": {"solved": true, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"call": "assertEquals(3, fibonacci(4));", "correct": true}, {"call": "assertEquals(21, fibonacci(8));", "correct": true}, {"call": "assertEquals(6765, fibonacci(20));", "correct": true}], "printed": ""}, "12467": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "124367": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "123467": {"solved": true, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"call": "assertEquals(3, fibonacci(4));", "correct": true}, {"call": "assertEquals(21, fibonacci(8));", "correct": true}, {"call": "assertEquals(6765, fibonacci(20));", "correct": true}], "printed": ""}, "1236547": {"solved": false, "results": [{"expected": "1", "received": "2", "call": "assertEquals(1, fibonacci(1));", "correct": false}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "1247": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "1247365": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "361247": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "124673": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}, "124736": {"solved": false, "results": [{"call": "assertEquals(1, fibonacci(1));", "correct": true}, {"expected": "3", "received": "1", "call": "assertEquals(3, fibonacci(4));", "correct": false}, {"expected": "21", "received": "1", "call": "assertEquals(21, fibonacci(8));", "correct": false}, {"expected": "6765", "received": "1", "call": "assertEquals(6765, fibonacci(20));", "correct": false}], "printed": ""}}, "name": "Fibonnaci"}, {"tests": "assertEquals(4, ack(1,2));\r\nassertEquals(29, ack(3,2));\r\nassertEquals(4, ack(0,3));\r\nassertEquals(3, ack(2,0));\r\n", "description": "Write a function called ack(m,n) that evaluates the Ackermann function depending on the value of m and n&#58;\nif m = 0 then n+1 \nif m &gt; 0 and n = 0 then ack(m\u22121,1) \nif m &gt; 0 and n &gt; 0 then ack(m\u22121,ack(m,n\u22121))", "lines": ["int ack(int m, int n) {", "    if (m == 0) return n+1;", "    if (n == 0) return ack(m-1, 1);", "    return ack(m-1, ack(m, n-1));", "}"], "solution": "int ack(int m, int n) {\n    if (m == 0) return n+1;\n    if (n == 0) return ack(m-1, 1);\n    return ack(m-1, ack(m, n-1));\n}", "path_id": 8113761, "depth": 5, "problemset_id": 12600585, "examples": "The function ack(1,2) should return 4.\nThe function ack(3,2) should return 29.\nThe function ack(0,3) should return 4.\nThe function ack(2,0) should return 3.", "is_mobile_problem": true, "problemsetorder": 20, "id": 12609590, "nonErrorResults": {"12345": {"solved": true, "results": [{"call": "assertEquals(4, ack(1,2));", "correct": true}, {"call": "assertEquals(29, ack(3,2));", "correct": true}, {"call": "assertEquals(4, ack(0,3));", "correct": true}, {"call": "assertEquals(3, ack(2,0));", "correct": true}], "printed": ""}, "13245": {"solved": true, "results": [{"call": "assertEquals(4, ack(1,2));", "correct": true}, {"call": "assertEquals(29, ack(3,2));", "correct": true}, {"call": "assertEquals(4, ack(0,3));", "correct": true}, {"call": "assertEquals(3, ack(2,0));", "correct": true}], "printed": ""}}, "name": "Ackermann Function"}, {"tests": "assertEquals(1, gcd(5,3));\r\nassertEquals(2, gcd(34,18));\r\nassertEquals(8, gcd(56,8));\r\n", "description": "Write a function to calculate the GCD of two numbers. The greatest common divisor (GCD) of a and b is the largest number that divides both of them with no remainder.", "lines": ["int gcd(int a, int b) {", "    if (b == 0) return a;", "    return gcd(b, a % b);", "}"], "solution": "int gcd(int a, int b) {\r\n    if (b == 0) return a;\r\n    return gcd(b, a % b);\r\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12600585, "examples": "One way to find the GCD of two numbers is Euclid\u2019s algorithm, which is based on the observation that if r is the remainder when a is divided by b, then gcd(a,b) = gcd(b, r). As a base case, we can consider gcd(a,0) = a.", "is_mobile_problem": true, "problemsetorder": 28, "id": 12602578, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertEquals(1, gcd(5,3));", "correct": true}, {"call": "assertEquals(2, gcd(34,18));", "correct": true}, {"call": "assertEquals(8, gcd(56,8));", "correct": true}], "printed": ""}}, "name": "Greatest Common Divisor"}, {"tests": "assertFalse(is_power(3,5));\r\nassertTrue(is_power(4,2));\r\nassertFalse(is_power(2,16));\r\nassertTrue(is_power(16,2));\r\nassertFalse(is_power(10,2));\r\nassertFalse(is_power(1,2));", "description": "Write a function called is_power that takes parameters a and b and returns true if a is a power of b.", "lines": ["boolean is_power(int a, int b) {", "    if (a==b) return true;", "    return a%b==0 && is_power(a/b,b);", "}"], "solution": "boolean is_power(int a, int b) {\r\n    if (a==b) return true;\r\n    return a%b==0 && is_power(a/b,b);\r\n}", "path_id": 8113761, "depth": 4, "problemset_id": 12600585, "examples": "A number, a, is a power of b if it is divisible by b and a/b is a power of b.", "is_mobile_problem": true, "problemsetorder": 30, "id": 12612581, "nonErrorResults": {"1234": {"solved": true, "results": [{"call": "assertFalse(is_power(3,5));", "correct": true}, {"call": "assertTrue(is_power(4,2));", "correct": true}, {"call": "assertFalse(is_power(2,16));", "correct": true}, {"call": "assertTrue(is_power(16,2));", "correct": true}, {"call": "assertFalse(is_power(10,2));", "correct": true}, {"call": "assertFalse(is_power(1,2));", "correct": true}], "printed": ""}, "1342": {"solved": false, "results": [{"call": "assertFalse(is_power(3,5));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(4,2));", "correct": false}, {"call": "assertFalse(is_power(2,16));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(16,2));", "correct": false}, {"call": "assertFalse(is_power(10,2));", "correct": true}, {"call": "assertFalse(is_power(1,2));", "correct": true}], "printed": ""}, "1324": {"solved": false, "results": [{"call": "assertFalse(is_power(3,5));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(4,2));", "correct": false}, {"call": "assertFalse(is_power(2,16));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(16,2));", "correct": false}, {"call": "assertFalse(is_power(10,2));", "correct": true}, {"call": "assertFalse(is_power(1,2));", "correct": true}], "printed": ""}, "134": {"solved": false, "results": [{"call": "assertFalse(is_power(3,5));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(4,2));", "correct": false}, {"call": "assertFalse(is_power(2,16));", "correct": true}, {"expected": true, "received": false, "call": "assertTrue(is_power(16,2));", "correct": false}, {"call": "assertFalse(is_power(10,2));", "correct": true}, {"call": "assertFalse(is_power(1,2));", "correct": true}], "printed": ""}}, "name": "is_power"}], "type": "problems", "problemset": {"pathorder": 5, "editor": {"player_id": 12376680, "nickname": "Joshua Ng", "email": "PRIVATE"}, "id": 12600585, "name": "Java Level 5", "description": "Iteration and Recursion"}}